# -*- coding: utf-8 -*-
"""Analises.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11RiIspytCRVnsjTC9Fn8lFsbdfXsLamh
"""

# Instalação de biblioteca
!pip install gspread

# Importação de bibliotecas
from google.colab import auth
import gspread
from oauth2client.client import GoogleCredentials
import pandas as pd
import urllib.request
from gspread_dataframe import get_as_dataframe, set_with_dataframe
from google.auth import default

def GetData(site):

  # GET HTML FROM PAGE
  hdr = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',
        'Accept-Encoding': 'utf-8',
        'Accept-Language': 'en-US,en;q=0.8',
        'Connection': 'keep-alive'}

  req = urllib.request.Request(site, headers=hdr)

  try:
      page = urllib.request.urlopen(req)
  except urllib.request as e:
      print(e.fp.read())

  content = page.read()

  # Get Table from HTML text to Pandas dataframe
  tables = pd.read_html(str(content), decimal=',', thousands='.', encoding='utf-8') # Returns list of all tables on page
  table = tables[0] # Select table of interest
  return table

# Autenticação
auth.authenticate_user()
creds, _ = default()
gc = gspread.authorize(creds)

# Coleta de dados fundamentalistas
FII_table = GetData('https://www.fundsexplorer.com.br/ranking')

# Rename Columns
colunas_ok = ["CODIGO_DO_FUNDO",
              "SETOR",
              "PRECO_ATUAL",
              "LIQUIDEZ_DIARIA",
              "DIVIDENDO",
              "DIVIDEND_YIELD",
              "DY_3M_ACUMULADO",
              "DY_6M_ACUMULADO",
              "DY_12M_ACUMULADO",
              "DY_3M_MEDIA",
              "DY_6M_MEDIA",
              "DY_12M_MEDIA",
              "DY_ANO",
              "VARIACAO_PRECO",
              "RENTAB_PERIODO",
              "RENTAB_ACUMULADA",
              "PATRIMÔNIO_LIQ",
              "VPA",
              "P/VPA",
              "DY_PATRIMONIAL",
              "VARIACAO_PATRIMONIAL",
              "RENTAB_PATR_NO_PERIODO",
              "RENTAB_PATRACUMULADA",
              "VACANCIA_FISICA",
              "VACANCIA_FINANCEIRA",
              "QUANTIDADE_ATIVOS"]

FII_table.columns = colunas_ok

colunas_ok.remove('CODIGO_DO_FUNDO')
colunas_ok.remove('SETOR')
colunas_ok.remove('LIQUIDEZ_DIARIA')
colunas_ok.remove('P/VPA')
colunas_ok.remove('QUANTIDADE_ATIVOS')

dataframe_clean_fii = FII_table.iloc[:,:].copy()

# conversão de colunas para double
fields = colunas_ok
for item in fields:
  dataframe_clean_fii[item] = pd.to_numeric(dataframe_clean_fii[item].str.replace('%','').str.replace('.','').str.replace(',','.').str.replace('R\$',''))

colunas_ok.append('LIQUIDEZ_DIARIA')
colunas_ok.append('P/VPA')
colunas_ok.append('QUANTIDADE_ATIVOS')

# DY_12M_MEDIA > 0
dataframe_12M_MEDIA = dataframe_clean_fii[dataframe_clean_fii['DY_12M_MEDIA'] > 0].iloc[:,:].copy()

# LIQUIDEZ_DIARIA
dataframe_12M_MEDIA['LIQUIDEZ_DIARIA'] = dataframe_12M_MEDIA['LIQUIDEZ_DIARIA'] / 10
dataframe_LIQ = dataframe_12M_MEDIA[dataframe_12M_MEDIA['LIQUIDEZ_DIARIA'] > 10000].iloc[:,:].copy()

# P/VPA <= 1.15
dataframe_fii = dataframe_LIQ[dataframe_LIQ['P/VPA'] <= 1.15].iloc[:,:].copy()

# Tratamento dos dados da tabela principal para se adequar a planilha
for item in colunas_ok:
  dataframe_fii[item] = dataframe_fii[item].astype(str).str.replace('.',',')

dataframe_fii['SETOR'] = dataframe_fii['SETOR'].replace('H\\xc3\\xadbrido','Híbrido') \
                                               .replace('T\\xc3\\xadtulos e Val. Mob.','Títulos e Val. Mob.') \
                                               .replace('Log\\xc3\\xadstica','Logística')

"""Tratamento de dados"""

# Coleta de dados fundamentalistas
fundamentus_table = GetData('https://www.fundamentus.com.br/resultado.php')

# Rename Columns
fundamentus_table.columns = ['Papel', 'Cotação', 'P/L', 'P/VP', 'PSR', 
                             'Div.Yield', 'P/Ativo', 'P/Cap.Giro', 'P/EBIT', 
                             'P/Ativ Circ.Liq', 'EV/EBIT', 'EV/EBITDA', 
                             'Mrg Ebit', 'Mrg. Líq.', 'Liq. Corr.', 'ROIC',
                             'ROE', 'Liq.2meses', 'Patrim. Líq', 
                             'Dív.Brut/ Patrim.', 'Cresc. Rec.5a']

dataframe_clean = fundamentus_table.iloc[:,:].copy()

# conversão de colunas para double
fields = ['Div.Yield', 'Mrg Ebit', 'Mrg. Líq.', 'ROIC', 'ROE', 'Cresc. Rec.5a']
for item in fields:
  dataframe_clean[item] = pd.to_numeric(dataframe_clean[item].str.replace('%','').str.replace('.','').str.replace(',','.'))

# Tratamento dos dados da tabela principal para se adequar a planilha
fields = ['Cotação', 'P/L', 'P/VP', 'PSR', 'Div.Yield', 'P/Ativo',
          'P/Cap.Giro', 'P/EBIT', 'P/Ativ Circ.Liq', 'EV/EBIT', 'EV/EBITDA',
          'Mrg Ebit', 'Mrg. Líq.', 'Liq. Corr.', 'ROIC', 'ROE', 'Liq.2meses',
          'Patrim. Líq', 'Dív.Brut/ Patrim.', 'Cresc. Rec.5a']

for item in fields:
  fundamentus_table[item] = fundamentus_table[item].astype(str).str.replace('.',',')

"""Análise fundamentalista ([Video de referência](https://youtu.be/jhZj4fiKL5w))"""

#  P/L > 0
dataframe_pl = dataframe_clean[dataframe_clean['P/L'] > 0].iloc[:,:].copy()

# Div.Yield > 6
dataframe_div = dataframe_pl[dataframe_pl['Div.Yield'] > 6].iloc[:,:].copy()

# Cresc. Rec.5a > 0
dataframe_5a = dataframe_div[dataframe_div['Cresc. Rec.5a'] > 0].iloc[:,:].copy()

# ROIC > 10
dataframe_ROIC = dataframe_5a[dataframe_5a['ROIC'] > 10].iloc[:,:].copy()

# Mrg. Líq. > 10%
dataframe_mrg = dataframe_ROIC[dataframe_ROIC['Mrg. Líq.'] > 10].iloc[:,:].copy()

# Remove valores invalidos
dataframe_fundamentalista = dataframe_mrg[dataframe_mrg['Liq.2meses'] > 0].iloc[:,:].copy()

# Order by Div.Yield
dataframe_fundamentalista.sort_values(by=['Div.Yield'], inplace=True, ascending=False)

# troca do ponto pela virgula, para não quebrar a tabela do sheets
fields = ['Cotação', 'P/L', 'P/VP', 'PSR', 'Div.Yield', 'P/Ativo',
          'P/Cap.Giro', 'P/EBIT', 'P/Ativ Circ.Liq', 'EV/EBIT', 'EV/EBITDA',
          'Mrg Ebit', 'Mrg. Líq.', 'Liq. Corr.', 'ROIC', 'ROE', 'Liq.2meses',
          'Patrim. Líq', 'Dív.Brut/ Patrim.', 'Cresc. Rec.5a']

for item in fields:
  dataframe_fundamentalista[item] = dataframe_fundamentalista[item].astype(str).str.replace('.',',')

"""Atualização da planilha"""

# Abrir a planilha
planilha = gc.open('AnaliseDados')

#### FUNDAMENTUS ####

# apaga os dados atuais
planilha.values_clear('fundamentus')

# seleciona a planilha
fundamentus = planilha.get_worksheet(0)

set_with_dataframe(fundamentus, fundamentus_table)

#### FUNDAMENTALISTA ####

# apaga os dados atuais
planilha.values_clear('fundamentalista')

# seleciona a planilha
fundamentalista = planilha.get_worksheet(1)

set_with_dataframe(fundamentalista, dataframe_fundamentalista)

#### FUNDAMENTALISTA ####

# apaga os dados atuais
planilha.values_clear('FII')

# seleciona a planilha
FII = planilha.get_worksheet(2)

set_with_dataframe(FII, dataframe_fii)

display(dataframe_pl)

print(dataframe_pl.style.render())

s = dataframe_pl.style.format('{:.0f}')

